{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-07T06:57:06.646Z",
    "end": "2024-07-07T06:57:10.361Z",
    "duration": 3715,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f54f90da-45c2-4bdd-a2e4-09e11694c6b7",
      "title": "",
      "fullFile": "D:\\belajar\\Reqres\\test\\api\\crudUser.js",
      "file": "\\test\\api\\crudUser.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b8bbbf5a-3ecd-4ae5-a332-84eed1ffbca9",
          "title": "CRUD User",
          "fullFile": "D:\\belajar\\Reqres\\test\\api\\crudUser.js",
          "file": "\\test\\api\\crudUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create an user",
              "fullTitle": "CRUD User Create an user",
              "timedOut": false,
              "duration": 863,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl())\n  .post(\"/users\")\n  .send(DATA.CREATE_USER_DATA);\nconsole.log(\"-----------Request-----------\");\nconsole.log(\"Method: \", (await response).request.method);\nconsole.log(\"Url: \", (await response).request.url);\nconsole.log(\"Header:\\n\", (await response).request.header);\nconsole.log(\"Request Body:\\n\", (await response).request._data);\nconsole.log(\"\\n-----------Response-----------\");\nconsole.log(\"Response Status Code: \" + (await response).status);\nconsole.log(\"Response Body:\\n\", (await response).body);\n// parse the request body\nnameRequest = (await response).request._data.name;\njobRequest = (await response).request._data.job;\n// parse the response body\nnameResponse = (await response).body.name;\njobResponse = (await response).body.job;\nmyId = (await response).body.id;\n// assert\n// Check response status must be equal to 201\nexpect(201, \"response status must be equal to 201\").to.equal(\n  (await response).status\n);\n// cek respons bodi not empty\nexpect((await response).body).to.not.be.empty;\nassert.isNotEmpty((await response).body);\n// check requests and response bodies equal\nassert.equal(nameResponse, nameRequest, \"Unexpected name: \" + nameResponse);\nassert.equal(jobResponse, jobRequest, \"Unexpected job: \" + jobResponse);\n// check response body has a property\nexpect((await response).body).to.haveOwnProperty(\"id\");\nexpect((await response).body).to.have.own.property(\"createdAt\");\n// validasi json schema\nconsole.log(\"\\n-----------Validasi JSON Schema-----------\");\nconst isValid = ajv.validate(\n  DATA.VALID_CREATE_USER_SCHEMA,\n  (await response).body\n);\nif (!isValid) {\n  console.error(\"Validation errors:\", ajv.errorsText());\n} else {\n  console.log(\"JSON data is valid\");\n}",
              "err": {},
              "uuid": "f3bd73fd-4478-4ed0-95e4-2c789d95226f",
              "parentUUID": "b8bbbf5a-3ecd-4ae5-a332-84eed1ffbca9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Single User",
              "fullTitle": "CRUD User Get Single User",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//path params\nlet pathParams = 2;\n// let pathParams = myId;\nconst response = request(baseUrl())\n  .get(\"/users/\" + pathParams)\n  //.get('/users/23') //Single user not found\n  .set(\"accept\", \"application/json\");\nconsole.log(\"-----------Request-----------\");\nconsole.log(\"Method: \", (await response).request.method);\nconsole.log(\"Url: \", (await response).request.url);\nconsole.log(\"Header:\\n\", (await response).request.header);\nconsole.log(\"\\n-----------Response-----------\");\nconsole.log(\"Response Status Code: \" + (await response).status);\nconsole.log(\"Response Body:\\n\", (await response).body);\n// parse the response body\n// akses dan store array/objek respons bodi\nidResponse = (await response).body.data.id;\n// assert\n// Check response status must be equal to 200\nexpect(200, \"response status must be equal to 200\").to.equal(\n  (await response).status\n);\n// cek respons bodi not empty\nassert.isNotEmpty((await response).body);\n// check requests and response bodies equal\nassert.equal(idResponse, pathParams, \"Unexpected id: \" + idResponse);\n// check response body has a property\n// akses dan store array/objek respons bodi\nexpect((await response).body).to.have.nested.property(\"data.email\");\nassert.deepNestedInclude((await response).body, { \"data.id\": pathParams });\n// validasi json schema\nconsole.log(\"\\n-----------Validasi JSON Schema-----------\");\nconst isValid = ajv.validate(\n  DATA.VALID_GET_SINGLE_USER_SCHEMA,\n  (await response).body\n);\nif (!isValid) {\n  console.error(\"Validation errors:\", ajv.errorsText());\n} else {\n  console.log(\"JSON data is valid\");\n}",
              "err": {},
              "uuid": "17e9b5d6-f6ae-4202-be05-03bed03c4f64",
              "parentUUID": "b8bbbf5a-3ecd-4ae5-a332-84eed1ffbca9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get List Users",
              "fullTitle": "CRUD User Get List Users",
              "timedOut": false,
              "duration": 247,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl())\n  // .get(\"/users?page=2\")\n  .get(\"/users\")\n  // query params\n  .query({ page: 2 })\n  .set(\"accept\", \"application/json\");\nconsole.log(\"-----------Request-----------\");\nconsole.log(\"Method: \", (await response).request.method);\nconsole.log(\"Url: \", (await response).request.url);\nconsole.log(\"Header:\\n\", (await response).request.header);\nconsole.log(\"\\n-----------Response-----------\");\nconsole.log(\"Response Status Code: \" + (await response).status);\nconsole.log(\"Response Body:\\n\", (await response).body);\n// parse the response body\n// akses dan store array/objek respons bodi\nfirstNameId7Response = (await response).body.data[0].first_name;\nlastNameId8Response = (await response).body.data[1].last_name;\n// assert\n// Check response status must be equal to 200\nexpect(200, \"response status must be equal to 200\").to.equal(\n  (await response).status\n);\n// cek respons bodi not empty\nassert.isNotEmpty((await response).body);\n// check requests and response bodies equal\nassert.equal(\n  firstNameId7Response,\n  \"Michael\",\n  \"Unexpected first name id 7: \" + firstNameId7Response\n);\nassert.equal(\n  lastNameId8Response,\n  \"Ferguson\",\n  \"Unexpected last name id 8: \" + lastNameId8Response\n);\n// check response body has a property\n// akses dan store array/objek respons bodi\nexpect((await response).body).to.have.nested.property(\"data[2].avatar\");\nassert.deepNestedInclude((await response).body, { \"data[2].id\": 9 });\n// validasi json schema\nconsole.log(\"\\n-----------Validasi JSON Schema-----------\");\nconst isValid = ajv.validate(\n  DATA.VALID_GET_LIST_USERS_SCHEMA,\n  (await response).body\n);\nif (!isValid) {\n  console.error(\"Validation errors:\", ajv.errorsText());\n} else {\n  console.log(\"JSON data is valid\");\n}",
              "err": {},
              "uuid": "588e43e2-6a1d-486f-b9d1-d05976e74d3a",
              "parentUUID": "b8bbbf5a-3ecd-4ae5-a332-84eed1ffbca9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update an user",
              "fullTitle": "CRUD User Update an user",
              "timedOut": false,
              "duration": 998,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//path params\nlet pathParams = 2;\nconst response = request(baseUrl())\n  .put(\"/users/\" + pathParams)\n  .send(DATA.UPDATE_USER_DATA)\n  .set(\"accept\", \"application/json\");\nconsole.log(\"-----------Request-----------\");\nconsole.log(\"Method: \", (await response).request.method);\nconsole.log(\"Url: \", (await response).request.url);\nconsole.log(\"Header:\\n\", (await response).request.header);\nconsole.log(\"Request Body:\\n\", (await response).request._data);\nconsole.log(\"\\n-----------Response-----------\");\nconsole.log(\"Response Status Code: \" + (await response).status);\nconsole.log(\"Response Body:\\n\", (await response).body);\n// parse the request body\nnameRequest = (await response).request._data.name;\njobRequest = (await response).request._data.job;\n// parse the response body\nnameResponse = (await response).body.name;\njobResponse = (await response).body.job;\n// assert\n// Check response status must be equal to 200\nexpect(200, \"response status must be equal to 200\").to.equal(\n  (await response).status\n);\n// cek respons bodi not empty\nexpect((await response).body).to.not.be.empty;\n// check requests and response bodies equal\nassert.equal(nameResponse, nameRequest, \"Unexpected name: \" + nameResponse);\nassert.equal(jobResponse, jobRequest, \"Unexpected job: \" + jobResponse);\n// check response body has a property\nexpect((await response).body).to.have.own.property(\"updatedAt\");\n// validasi json schema\nconsole.log(\"\\n-----------Validasi JSON Schema-----------\");\nconst isValid = ajv.validate(\n  DATA.VALID_UPDATE_USER_SCHEMA,\n  (await response).body\n);\nif (!isValid) {\n  console.error(\"Validation errors:\", ajv.errorsText());\n} else {\n  console.log(\"JSON data is valid\");\n}",
              "err": {},
              "uuid": "fbdf7707-1063-4a14-8635-d92b746edac0",
              "parentUUID": "b8bbbf5a-3ecd-4ae5-a332-84eed1ffbca9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete an user",
              "fullTitle": "CRUD User Delete an user",
              "timedOut": false,
              "duration": 608,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//path params\nlet pathParams = 2;\nconst response = request(baseUrl())\n  .delete(\"/users/\" + pathParams)\n  .set(\"accept\", \"*/*\");\nconsole.log(\"-----------Request-----------\");\nconsole.log(\"Method: \", (await response).request.method);\nconsole.log(\"Url: \", (await response).request.url);\nconsole.log(\"Header:\\n\", (await response).request.header);\nconsole.log(\"\\n-----------Response-----------\");\nconsole.log(\"Response Status Code: \" + (await response).status);\n// assert\n// Check response status must be equal to 204\nexpect(204, \"response status must be equal to 204\").to.equal(\n  (await response).status\n);\n// cek respons bodi is empty\nexpect((await response).body).to.be.empty;\n// check response body has a property\nexpect((await response).body).to.not.have.property(\"updatedAt\");",
              "err": {},
              "uuid": "40971384-b0d7-4c31-b2e5-3b9e157da1ac",
              "parentUUID": "b8bbbf5a-3ecd-4ae5-a332-84eed1ffbca9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f3bd73fd-4478-4ed0-95e4-2c789d95226f",
            "17e9b5d6-f6ae-4202-be05-03bed03c4f64",
            "588e43e2-6a1d-486f-b9d1-d05976e74d3a",
            "fbdf7707-1063-4a14-8635-d92b746edac0",
            "40971384-b0d7-4c31-b2e5-3b9e157da1ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2940,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}